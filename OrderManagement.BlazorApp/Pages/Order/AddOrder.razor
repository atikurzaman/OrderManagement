@page "/order/add"
@inject HttpClient http
@inject NavigationManager navigationManager
@inject NotificationService notificationService

<PageTitle>Add Order</PageTitle>

<div class="form-group mb-3">
    <h3 class="text-center">Add Order</h3>
</div>

<EditForm Model="@order" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="name">Name</label>
        <div>
            <InputText class="form-control" id="name" @bind-Value="order.Name" />
            <ValidationMessage For="(() => order.Name)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label for="state">State</label>
        <div>
            <InputText class="form-control" id="state" @bind-Value="order.State" />
            <ValidationMessage For="(() => order.State)"></ValidationMessage>
        </div>
    </div>

    @* <div class="form-group">
    <div class="form-group">
    <button type="button" class="btn btn-secondary"
    @onclick="@(() => student.Addresses.Add(new Address()))">
    Add Address
    </button>
    </div>

    @for (var i = 0; i < student.Addresses.Count; i++)
    {
    var index = i;
    var address = student.Addresses[i];

    <h5>Address @(i+1)</h5>

    <div class="form-group">
    <label>Street:</label>
    <InputText class="form-control" @bind-Value="address.Street" />
    </div>

    <div class="form-group">
    <label>City:</label>
    <InputText class="form-control" @bind-Value="address.City" />
    </div>

    <button type="button" class="btn btn-danger"
    @onclick="@(() => student.Addresses.RemoveAt(index))">
    Remove
    </button>
    }
    </div>*@

    <div class="form-group mt-3">
        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-secondary" type="button" @onclick="clear">Clear</button>
    </div>

</EditForm>

@code {

    private Order order = new Order();

    protected async Task OnValidSubmit()
    {
        var response = await http.PostAsJsonAsync("orders", order);
        var body = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Order has been saved successfully." });
            navigationManager.NavigateTo("orders");
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Failed to save order." });
        }
    }

    private void clear()
    {
        order = new Order();
    }

}
