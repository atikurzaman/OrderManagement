@page "/orders"
@inject HttpClient http
@inject NavigationManager navigationManager

<PageTitle>Orders</PageTitle>

<div class="form-group mb-3">
    <h3 class="text-center">Orders</h3>
</div>

<div class="form-group mb-3">
    <a class="btn btn-success" href="order/add">New Order</a>
</div>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid Data="@orders" TItem="Order" AllowFiltering="true" AllowPaging="true" PageSize="4" AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="Order" Property="Name" Title="Name"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Order" Property="State" Title="State"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Order" Title="Edit">
                <Template Context="order">
                    <a href="order/edit/@order.Id">Edit</a>                    
                </Template>                
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Order" Title="Delete">                
                <Template Context="order">
                    <a @onclick="(() => onDeleteClick(order.Id))">Edit</a>                    
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    private List<Order>? orders;

    private async Task<List<Order>?> getOrders()
    {
        orders = await http.GetFromJsonAsync<List<Order>>("orders");
        return orders;
    }

    protected override async Task OnInitializedAsync()
    {
        await getOrders();
    }    

    private void onDeleteClick(int orderId)
    {
        
    }

}
