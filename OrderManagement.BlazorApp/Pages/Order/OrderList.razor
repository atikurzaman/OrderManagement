@page "/orders"
@inject HttpClient http
@inject NavigationManager navigationManager
@inject NotificationService notificationService

<PageTitle>Orders</PageTitle>

<div class="row mb-3">
    <div class="col-md-12"> 
        <h3 class="text-center">Orders</h3>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-12"> 
        <a class="btn btn-success" href="order/add-edit">New Order</a>
    </div>
</div>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid Data="@orders" TItem="Order" AllowFiltering="true" AllowPaging="true" PageSize="4" AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="Order" Property="Name" Title="Name"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Order" Property="State" Title="State"></RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Order" Title="Edit" Sortable="false" Filterable=false TextAlign="TextAlign.Center">
                <Template Context="order">
                    <a href="order/add-edit/@order.Id" class="btn btn-secondary">Edit</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Order" Title="Delete" Sortable="false" Filterable=false TextAlign="TextAlign.Center">
                <Template Context="order">
                    <a @onclick="(() => onDeleteClick(order.Id))" href="" class="btn btn-danger">Delete</a>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    private List<Order>? orders;

    private async Task<List<Order>?> getOrders()
    {
        orders = await http.GetFromJsonAsync<List<Order>>("orders");
        return orders;
    }

    protected override async Task OnInitializedAsync()
    {
        await getOrders();
    }

    private async Task onDeleteClick(int orderId)
    {
        var response = await http.DeleteAsync($"orders/{orderId}");

        if (response.IsSuccessStatusCode)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Order has been deleted successfully." });
            navigationManager.NavigateTo("orders");
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Failed to delete order." });
        }
    }

}
